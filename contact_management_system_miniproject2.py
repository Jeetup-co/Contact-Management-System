# -*- coding: utf-8 -*-
"""Contact_Management_System_miniproject2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CxVI5DXLzojfWhRdHy0Zjvdw5qhhwcn7

# Contact Management System**

You are tasked with designing a Contact Management System that allows users to add, delete, and view contacts. The system must store the contact data in a CSV (Comma Separated Values) file so that the contacts are persisted even after the program is closed.

The contact details include:

* Name: The name of the person.
* Phone: The phone number of the person.
* Email: The email address of the person.

Each contact is assigned a unique ID that will help identify it. The system should allow users to interact with it through a menu-driven interface.

**Functional Requirements:**

**Start the Program:**

The program loads the contacts from contacts.csv (if it exists). If there are no contacts, it will load an empty list.

**1. Adding a Contact:**

* The user selects the option to add a contact.
* The user is prompted to enter the name, phone number, and email of the contact.
* The contact is assigned an ID, saved in memory, and written to the CSV file.
* The updated contact list is displayed.

**2. Deleting a Contact:**

* The user selects the option to delete a contact.
* The user is prompted to enter the ID of the contact to delete.
* If the ID exists, the contact is removed from memory and the CSV file. The updated contact list is displayed.
* If the ID does not exist, the user is notified that the contact was not found.

**3. Viewing Contacts:**

* The user selects the option to view contacts.
* All contacts are displayed, including their ID, name, phone number, and email.

**4.Exiting the Program:**

* The user selects the option to exit.
* The program ends and any unsaved changes are saved to the CSV file.

**Requirements Clarification:**

* ID Generation: The ID is assigned sequentially (starting from 1) and is incremented each time a new contact is added.
* CSV File Format:
* The CSV file will have a header row with columns: id, name, phone, and email.
* Each contact will be stored in a row with the corresponding information.
* Persistence: If the program is restarted, it should reload the contacts from the CSV file, so no data is lost.
* Error Handling: The program should handle cases where a user tries to delete a contact with an ID that doesn't exist, and it should inform the user accordingly.
"""

import csv
import os


# Load contacts from CSV
def load_contacts():
  contacts = {}
  if os.path.exists("contacts.csv"):
    with open("contacts.csv", "r") as file:
      reader = csv.reader(file)
      next(reader)  # Skip the header row
      for row in reader:
        contacts_id = int(row[0])
        contacts[contacts_id] = {"name": row[1], "phone": row[2], "email": row[3]}   # { 1 : {"Name": "Alice", "phone":968697,} }
  return contacts

# Save contacts to CSV file
def save_contacts(contacts):
  with open("contacts.csv", "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Id", "Name", "Phone", "Email"])
    for contact_id,info in contacts.items():
      writer.writerow([contact_id, info["Name"], info["Phone"], info["Email"]])  #{ 1 : {"Name":"Alice", "Phone":80808, "Email":"Alice@hmail.com"}}


# Add a new contact
def add_contact(contacts):
  name = input("Enter the name: ")
  phone = int(input("Enter the phone number: "))
  email = input("Enter the email address: ")
  contact_id = len(contacts) + 1
  contacts[contact_id] = {"Name" : name, "Phone" : phone, "Email" : email}
  print("Contact added successfully")
  save_contacts(contacts)
  view_contacts(contacts)

# Delete a contact
def delete_contact(contacts):
  contact_id = int(input("Enter the Id of the contact to delete: "))
  if contact_id in contacts:
    del contacts[contact_id]
    print("Contact deleted successfully")
    save_contacts(contacts)
    view_contacts(contacts)
  else:
    print("Contact not Found!")



# View all contacts
def view_contacts(contacts):
  if not contacts:
    print("No contacts found!")

  else:
    print("\nContact List: ")
    for contact_id,info in contacts.items():
      print(f"ID: {contact_id}, Name: {info["Name"]}, Phone: {info["Phone"]}, Email: {info["Email"]}")


def main():
  contacts = load_contacts()

  while True:
    print("\nContact Management System")
    print("1. Add a contact")
    print("2. Delete a contact")
    print("3. View contacts")
    print("4. Exit")

    choice = input("Enter your choice (1-4): ")

    if choice == "1":
      add_contact(contacts)
    elif choice == "2":
      delete_contact(contacts)
    elif choice == "3":
      view_contacts(contacts)
    elif choice == "4":
      print("Exiting the program. \nThank You Goodbye")
      break
    else:
      print("Invalid Output Please Try Again!")



# Start the program
main()

